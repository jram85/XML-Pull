import xml.etree.cElementTree as ET
from xml.dom import minidom
import requests
import time
import base64
from json.decoder import JSONDecodeError
from typing import List
from functools import wraps


# JAMF settings
JAMF_PRO_URL = ''  # Input your JAMF url here
JAMF_USENAME = ''  # Input your JAMF credentials here
JAMF_PASSWORD = ''

# ManageEngine settings
MEngine_URL = ''
MEngine_TECHNICIAN_KEY = ''

CI_type = 'Computer'

# Correlation names from JAMF to manageengine
TAGS_CORRELATIONS = {
    'name': 'CI Name',
    'model': 'Product Name',
    'building': 'Site',
    'serial_number': 'Resource Serial No.',
    'model_identifier': 'Description',
    'total_ram': 'Total Memory',
    'os_name': 'OS',
    'os_version': 'Service Pack',
    'make': 'Manufacturer',
    'application': "Software_Info
}


# Start of a script

JAMF_CREDENTIALS = base64.b64encode(bytes(JAMF_USENAME + ':' + JAMF_PASSWORD, 'utf-8')).decode('utf-8')

jamf_headers = {
    "authorization": "Basic " + JAMF_CREDENTIALS,
    "accept": "application/json"
}

errors = []


def xml_wrapper(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        reparsed = minidom.parseString(result)
        xml_string = reparsed.toxml(encoding='UTF-8').decode('UTF-8')
        return xml_string
    return wrapper


def fetch_computer_by_id(session, computer_id):
    response = session.get(
        '{url}/JSSResource/computers/id/{id_n}'.format(url=JAMF_PRO_URL, id_n=str(computer_id)),
        headers={**jamf_headers, 'accept': 'application/xml'}
    )
    return response.text


def set_parameter(record, name, value):
    parameter = ET.SubElement(record, 'parameter')
    p_name = ET.SubElement(parameter, 'name')
    p_value = ET.SubElement(parameter, 'value')
    p_name.text = name
    p_value.text = value


@xml_wrapper
def get_add_xml_from_computers(computers_xml_info):
    # two changes to this function:
    # 1.  added an else to the try except
    # 2.  Moved the return outside of the for loop
    # I did that last one because it made more sense to me.
    # Feel free to put it back.
    api_root = ET.Element('API', attrib={'version': "1.0", 'locale': "en"})
    records = ET.SubElement(api_root, 'records')
    for computer_name, computer in computers_xml_info:
        counter = 0
        record = ET.SubElement(records, 'record')
        try:
            xml_computer = ET.fromstring(computer)
        except Exception as e:
            errors.append({'name': computer_name, 'reason': e})
            continue
        else:
            applications = xml_computer.find('applications')
            if applications is not None:
                software = ET.Element('Software')
                software.text = ''
                for application_element in applications.iter(tag='application'):
                    app_name = application_element.findtext('name', default='')
                    version = application_element.findtext('version', default='')
                    software.text += '{}\t{}\n'.format(app_name, version)
                index = list(xml_computer).index(applications)
                xml_computer.remove(applications)
                xml_computer.insert(index, software)

        for category in xml_computer:
            for child in category:
                if child.tag in TAGS_CORRELATIONS.keys():
                    value = child.text if child.text else 'Null'
                    set_parameter(record, TAGS_CORRELATIONS.get(child.tag), value)
                    counter += 1
                    if counter == 1:
                        set_parameter(record, 'CI Type', CI_type)

    return ET.tostring(api_root, 'utf-8')


@xml_wrapper
def get_update_xml_from_computer(computer_name, computer_xml_info):
    api_root = ET.Element('API', attrib={'version': "1.0", 'locale': "en"})
    citype = ET.SubElement(api_root, 'citype')
    citype_name = ET.SubElement(citype, 'name')
    citype_name.text = CI_type

    # Finding options
    criterias = ET.SubElement(citype, 'criterias')
    criteria = ET.SubElement(criterias, 'criteria')
    parameter = ET.SubElement(criteria, 'parameter')
    parameter_name = ET.SubElement(parameter, 'name', {'compOperator': "IS"})
    parameter_name.text = 'CI Name'
    parameter_value = ET.SubElement(parameter, 'value')
    parameter_value.text = computer_name

    # Actual updates
    newvalue = ET.SubElement(citype, 'newvalue')
    record = ET.SubElement(newvalue, 'record')

    xml_computer = ''
    try:
        xml_computer = ET.fromstring(computer_xml_info)
    except Exception as e:
        errors.append({'name': computer_name, 'reason': e})

    for category in xml_computer:
        for child in category:
            if child.tag in TAGS_CORRELATIONS.keys():
                if child.tag not in ('name', 'model'):
                    value = child.text if child.text else 'Null'
                    set_parameter(record, TAGS_CORRELATIONS.get(child.tag), value)

    return ET.tostring(api_root, 'utf-8')


def main():
    computers_xml_info = []
    computers_fetched = 0
    # Fetching all computers
    with requests.Session() as session:
        session.headers = jamf_headers
        jamf_all_computers_response = session.get(JAMF_PRO_URL + '/JSSResource/computers', verify=False)
        jamf_all_computers_list = jamf_all_computers_response.json()
        for count, computer in enumerate(jamf_all_computers_list['computers']):
            c_xml_info = fetch_computer_by_id(session, computer['id'])
            computers_xml_info.append((computer['name'], c_xml_info))
            computers_fetched = count + 1

    # Creation of an XML string
    while computers_xml_info:
        managengine_workstations_update_xml = ''
        managengine_workstations_xml = get_add_xml_from_computers(computers_xml_info)

        # Post request to ManageEngine
        response = requests.post(MEngine_URL + '/api/cmdb/ci', data={
           'INPUT_DATA': managengine_workstations_xml,
           'OPERATION_NAME': 'add',
           'TECHNICIAN_KEY': MEngine_TECHNICIAN_KEY
        }, verify=False)
        try:
            mengine_response = response.json()
        except JSONDecodeError:
            mengine_response = response.text

        mengine_update_response = ''
        try:
            if mengine_response.get('API', False):
                operation = mengine_response['API']['response']['operation']
                status_code = operation['result']['statuscode']
                if status_code in (3002, 3016):
                    computers_update_xml_info = []
                    ci = []
                    if status_code == 3002:
                        ci = operation['Details']['records']['success'][1]['ci']
                    elif status_code == 3016:
                        ci = operation['Details']['records']['failed'][1]['ci']
                    if isinstance(ci, List):
                        for item in ci:
                            if item.get('error', False) and 'is already exists' in item['error']:
                                computer_xml = [comp for comp in computers_xml_info if comp[0] == item['name']]
                                if computer_xml:
                                    computers_update_xml_info.append(computer_xml[0])
                    else:
                        if ci.get('error', False) and 'is already exists' in ci.get('error', ''):
                            computer_xml = [comp for comp in computers_xml_info if comp[0] == ci.get('name', '')]
                            if computer_xml:
                                computers_update_xml_info.append(computer_xml[0])

                    for computer in computers_update_xml_info:
                        managengine_workstations_update_xml = get_update_xml_from_computer(*computer)
                        # Post request for update of computers
                        response = requests.post(MEngine_URL + '/api/cmdb/ci', data={
                           'INPUT_DATA': managengine_workstations_update_xml,
                           'OPERATION_NAME': 'update',
                           'TECHNICIAN_KEY': MEngine_TECHNICIAN_KEY
                        }, verify=False)
                        try:
                            mengine_update_response = response.json()
                        except JSONDecodeError:
                            mengine_update_response = response.text
                    computers_xml_info = [comp for comp in computers_xml_info
                                          if comp[0] not in computers_update_xml_info]
        except AttributeError:
            pass

        print('Status of request to ManageEngine: {}'.format(response.status_code))
        print('ManageEngine response: {}'.format(mengine_response))
        if mengine_update_response:
            print('ManageEngine update response: {}'.format(mengine_update_response))
            if mengine_update_response['API']['response']['operation']['result']['statuscode'] == 3001:
                print("XML that was sent for update: ", managengine_workstations_update_xml)
                break

    return errors, computers_fetched


if __name__ == '__main__':
    start_time = time.time()
    out = main()
    print('Errors: {}'.format(str(out[0])))
    print('{} computers fetched.'.format(str(out[1])))
    print('Time for {0} requests: {1} sec.'.format(str(out[1] + 1), str(time.time() - start_time)))
